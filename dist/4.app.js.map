{"version":3,"sources":["webpack:///4.app.js","webpack:///./~/angular-breadcrumb/release/angular-breadcrumb.js"],"names":["webpackJsonp",30,"module","exports","window","angular","undefined","isAOlderThanB","scopeA","scopeB","equals","length","parseStateRef","ref","parsed","replace","match","Error","state","paramExpr","$Breadcrumb","$$options","prefixStateName","template","templateUrl","includeAbstract","this","setOptions","options","extend","$get","$state","$stateParams","$rootScope","$lastViewScope","$on","event","targetScope","ncyBreadcrumbIgnore","$id","$$parentState","parent","exec","name","isObjectParent","$$addStateInChain","chain","stateRef","conf","parentParams","force","skip","i","l","get","ncyBreadcrumb","$eval","ncyBreadcrumbLink","href","unshift","$$breadcrumbParentState","isFunction","parentStateRef","getTemplate","templates","getTemplateUrl","getStatesChain","exitOnFirst","$current","self","getLastStep","$getLastViewScope","BreadcrumbDirective","$interpolate","$breadcrumb","$$templates","bootstrap2","bootstrap3","restrict","scope","link","post","labelWatchers","renderBreadcrumb","deregisterWatchers","viewScope","steps","forEach","step","label","parseLabel","ncyBreadcrumbLabel","registerWatchers","BreadcrumbLastDirective","compile","cElement","cAttrs","attr","$attr","ncyBreadcrumbLast","html","renderLabel","lastStep","BreadcrumbTextDirective","ncyBreadcrumbText","separator","ncyBreadcrumbTextSeparator","registerWatchersText","labelWatcherArray","interpolationFunction","getExpression","expression","watcher","$watch","newValue","oldValue","push","combinedLabels","ncyBreadcrumbChain","join","expressions","parts","part","exp","deregisterWatch","$inject","provider","directive"],"mappings":"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","file":"4.app.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 30:\n/***/ function(module, exports) {\n\n\t/*! angular-breadcrumb - v0.4.1\n\t* http://ncuillery.github.io/angular-breadcrumb\n\t* Copyright (c) 2015 Nicolas Cuillery; Licensed MIT */\n\t\n\t(function (window, angular, undefined) {\n\t'use strict';\n\t\n\tfunction isAOlderThanB(scopeA, scopeB) {\n\t    if(angular.equals(scopeA.length, scopeB.length)) {\n\t        return scopeA > scopeB;\n\t    } else {\n\t        return scopeA.length > scopeB.length;\n\t    }\n\t}\n\t\n\tfunction parseStateRef(ref) {\n\t    var parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n\t    if (!parsed || parsed.length !== 4) { throw new Error(\"Invalid state ref '\" + ref + \"'\"); }\n\t    return { state: parsed[1], paramExpr: parsed[3] || null };\n\t}\n\t\n\tfunction $Breadcrumb() {\n\t\n\t    var $$options = {\n\t        prefixStateName: null,\n\t        template: 'bootstrap3',\n\t        templateUrl: null,\n\t        includeAbstract : false\n\t    };\n\t\n\t    this.setOptions = function(options) {\n\t        angular.extend($$options, options);\n\t    };\n\t\n\t    this.$get = ['$state', '$stateParams', '$rootScope', function($state, $stateParams, $rootScope) {\n\t\n\t        var $lastViewScope = $rootScope;\n\t\n\t        // Early catch of $viewContentLoaded event\n\t        $rootScope.$on('$viewContentLoaded', function (event) {\n\t            // With nested views, the event occur several times, in \"wrong\" order\n\t            if(!event.targetScope.ncyBreadcrumbIgnore &&\n\t                isAOlderThanB(event.targetScope.$id, $lastViewScope.$id)) {\n\t                $lastViewScope = event.targetScope;\n\t            }\n\t        });\n\t\n\t        // Get the parent state\n\t        var $$parentState = function(state) {\n\t            // Check if state has explicit parent OR we try guess parent from its name\n\t            var parent = state.parent || (/^(.+)\\.[^.]+$/.exec(state.name) || [])[1];\n\t            var isObjectParent = typeof parent === \"object\";\n\t            // if parent is a object reference, then extract the name\n\t            return isObjectParent ? parent.name : parent;\n\t        };\n\t\n\t        // Add the state in the chain if not already in and if not abstract\n\t        var $$addStateInChain = function(chain, stateRef) {\n\t            var conf,\n\t                parentParams,\n\t                ref = parseStateRef(stateRef),\n\t                force = false,\n\t                skip = false;\n\t\n\t            for(var i=0, l=chain.length; i<l; i+=1) {\n\t                if (chain[i].name === ref.state) {\n\t                    return;\n\t                }\n\t            }\n\t\n\t            conf = $state.get(ref.state);\n\t            // Get breadcrumb options\n\t            if(conf.ncyBreadcrumb) {\n\t                if(conf.ncyBreadcrumb.force){ force = true; }\n\t                if(conf.ncyBreadcrumb.skip){ skip = true; }\n\t            }\n\t            if((!conf.abstract || $$options.includeAbstract || force) && !skip) {\n\t                if(ref.paramExpr) {\n\t                    parentParams = $lastViewScope.$eval(ref.paramExpr);\n\t                }\n\t\n\t                conf.ncyBreadcrumbLink = $state.href(ref.state, parentParams || $stateParams || {});\n\t                chain.unshift(conf);\n\t            }\n\t        };\n\t\n\t        // Get the state for the parent step in the breadcrumb\n\t        var $$breadcrumbParentState = function(stateRef) {\n\t            var ref = parseStateRef(stateRef),\n\t                conf = $state.get(ref.state);\n\t\n\t            if(conf.ncyBreadcrumb && conf.ncyBreadcrumb.parent) {\n\t                // Handle the \"parent\" property of the breadcrumb, override the parent/child relation of the state\n\t                var isFunction = typeof conf.ncyBreadcrumb.parent === 'function';\n\t                var parentStateRef = isFunction ? conf.ncyBreadcrumb.parent($lastViewScope) : conf.ncyBreadcrumb.parent;\n\t                if(parentStateRef) {\n\t                    return parentStateRef;\n\t                }\n\t            }\n\t\n\t            return $$parentState(conf);\n\t        };\n\t\n\t        return {\n\t\n\t            getTemplate: function(templates) {\n\t                if($$options.templateUrl) {\n\t                    // templateUrl takes precedence over template\n\t                    return null;\n\t                } else if(templates[$$options.template]) {\n\t                    // Predefined templates (bootstrap, ...)\n\t                    return templates[$$options.template];\n\t                } else {\n\t                    return $$options.template;\n\t                }\n\t            },\n\t\n\t            getTemplateUrl: function() {\n\t                return $$options.templateUrl;\n\t            },\n\t\n\t            getStatesChain: function(exitOnFirst) { // Deliberately undocumented param, see getLastStep\n\t                var chain = [];\n\t\n\t                // From current state to the root\n\t                for(var stateRef = $state.$current.self.name; stateRef; stateRef=$$breadcrumbParentState(stateRef)) {\n\t                    $$addStateInChain(chain, stateRef);\n\t                    if(exitOnFirst && chain.length) {\n\t                        return chain;\n\t                    }\n\t                }\n\t\n\t                // Prefix state treatment\n\t                if($$options.prefixStateName) {\n\t                    $$addStateInChain(chain, $$options.prefixStateName);\n\t                }\n\t\n\t                return chain;\n\t            },\n\t\n\t            getLastStep: function() {\n\t                var chain = this.getStatesChain(true);\n\t                return chain.length ? chain[0] : undefined;\n\t            },\n\t\n\t            $getLastViewScope: function() {\n\t                return $lastViewScope;\n\t            }\n\t        };\n\t    }];\n\t}\n\t\n\tvar getExpression = function(interpolationFunction) {\n\t    if(interpolationFunction.expressions) {\n\t        return interpolationFunction.expressions;\n\t    } else {\n\t        var expressions = [];\n\t        angular.forEach(interpolationFunction.parts, function(part) {\n\t            if(angular.isFunction(part)) {\n\t                expressions.push(part.exp);\n\t            }\n\t        });\n\t        return expressions;\n\t    }\n\t};\n\t\n\tvar registerWatchers = function(labelWatcherArray, interpolationFunction, viewScope, step) {\n\t    angular.forEach(getExpression(interpolationFunction), function(expression) {\n\t        var watcher = viewScope.$watch(expression, function() {\n\t            step.ncyBreadcrumbLabel = interpolationFunction(viewScope);\n\t        });\n\t        labelWatcherArray.push(watcher);\n\t    });\n\t\n\t};\n\t\n\tvar deregisterWatchers = function(labelWatcherArray) {\n\t    angular.forEach(labelWatcherArray, function(deregisterWatch) {\n\t        deregisterWatch();\n\t    });\n\t};\n\t\n\tfunction BreadcrumbDirective($interpolate, $breadcrumb, $rootScope) {\n\t    var $$templates = {\n\t        bootstrap2: '<ul class=\"breadcrumb\">' +\n\t            '<li ng-repeat=\"step in steps\" ng-switch=\"$last || !!step.abstract\" ng-class=\"{active: $last}\">' +\n\t            '<a ng-switch-when=\"false\" href=\"{{step.ncyBreadcrumbLink}}\">{{step.ncyBreadcrumbLabel}}</a>' +\n\t            '<span ng-switch-when=\"true\">{{step.ncyBreadcrumbLabel}}</span>' +\n\t            '<span class=\"divider\" ng-hide=\"$last\">/</span>' +\n\t            '</li>' +\n\t            '</ul>',\n\t        bootstrap3: '<ol class=\"breadcrumb\">' +\n\t            '<li ng-repeat=\"step in steps\" ng-class=\"{active: $last}\" ng-switch=\"$last || !!step.abstract\">' +\n\t            '<a ng-switch-when=\"false\" href=\"{{step.ncyBreadcrumbLink}}\">{{step.ncyBreadcrumbLabel}}</a>' +\n\t            '<span ng-switch-when=\"true\">{{step.ncyBreadcrumbLabel}}</span>' +\n\t            '</li>' +\n\t            '</ol>'\n\t    };\n\t\n\t    return {\n\t        restrict: 'AE',\n\t        replace: true,\n\t        scope: {},\n\t        template: $breadcrumb.getTemplate($$templates),\n\t        templateUrl: $breadcrumb.getTemplateUrl(),\n\t        link: {\n\t            post: function postLink(scope) {\n\t                var labelWatchers = [];\n\t\n\t                var renderBreadcrumb = function() {\n\t                    deregisterWatchers(labelWatchers);\n\t                    labelWatchers = [];\n\t                    \n\t                    var viewScope = $breadcrumb.$getLastViewScope();\n\t                    scope.steps = $breadcrumb.getStatesChain();\n\t                    angular.forEach(scope.steps, function (step) {\n\t                        if (step.ncyBreadcrumb && step.ncyBreadcrumb.label) {\n\t                            var parseLabel = $interpolate(step.ncyBreadcrumb.label);\n\t                            step.ncyBreadcrumbLabel = parseLabel(viewScope);\n\t                            // Watcher for further viewScope updates\n\t                            registerWatchers(labelWatchers, parseLabel, viewScope, step);\n\t                        } else {\n\t                            step.ncyBreadcrumbLabel = step.name;\n\t                        }\n\t                    });\n\t                };\n\t\n\t                $rootScope.$on('$viewContentLoaded', function (event) {\n\t                    if(!event.targetScope.ncyBreadcrumbIgnore) {\n\t                        renderBreadcrumb();\n\t                    }\n\t                });\n\t\n\t                // View(s) may be already loaded while the directive's linking\n\t                renderBreadcrumb();\n\t            }\n\t        }\n\t    };\n\t}\n\tBreadcrumbDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\t\n\tfunction BreadcrumbLastDirective($interpolate, $breadcrumb, $rootScope) {\n\t\n\t    return {\n\t        restrict: 'A',\n\t        scope: {},\n\t        template: '{{ncyBreadcrumbLabel}}',\n\t        compile: function(cElement, cAttrs) {\n\t\n\t            // Override the default template if ncyBreadcrumbLast has a value\n\t            var template = cElement.attr(cAttrs.$attr.ncyBreadcrumbLast);\n\t            if(template) {\n\t                cElement.html(template);\n\t            }\n\t\n\t            return {\n\t                post: function postLink(scope) {\n\t                    var labelWatchers = [];\n\t\n\t                    var renderLabel = function() {\n\t                        deregisterWatchers(labelWatchers);\n\t                        labelWatchers = [];\n\t                        \n\t                        var viewScope = $breadcrumb.$getLastViewScope();\n\t                        var lastStep = $breadcrumb.getLastStep();\n\t                        if(lastStep) {\n\t                            scope.ncyBreadcrumbLink = lastStep.ncyBreadcrumbLink;\n\t                            if (lastStep.ncyBreadcrumb && lastStep.ncyBreadcrumb.label) {\n\t                                var parseLabel = $interpolate(lastStep.ncyBreadcrumb.label);\n\t                                scope.ncyBreadcrumbLabel = parseLabel(viewScope);\n\t                                // Watcher for further viewScope updates\n\t                                // Tricky last arg: the last step is the entire scope of the directive !\n\t                                registerWatchers(labelWatchers, parseLabel, viewScope, scope);\n\t                            } else {\n\t                                scope.ncyBreadcrumbLabel = lastStep.name;\n\t                            }\n\t                        }\n\t                    };\n\t\n\t                    $rootScope.$on('$viewContentLoaded', function (event) {\n\t                        if(!event.targetScope.ncyBreadcrumbIgnore) {\n\t                            renderLabel();\n\t                        }\n\t                    });\n\t\n\t                    // View(s) may be already loaded while the directive's linking\n\t                    renderLabel();\n\t                }\n\t            };\n\t\n\t        }\n\t    };\n\t}\n\tBreadcrumbLastDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\t\n\tfunction BreadcrumbTextDirective($interpolate, $breadcrumb, $rootScope) {\n\t\n\t    return {\n\t        restrict: 'A',\n\t        scope: {},\n\t        template: '{{ncyBreadcrumbChain}}',\n\t\n\t        compile: function(cElement, cAttrs) {\n\t            // Override the default template if ncyBreadcrumbText has a value\n\t            var template = cElement.attr(cAttrs.$attr.ncyBreadcrumbText);\n\t            if(template) {\n\t                cElement.html(template);\n\t            }\n\t            \n\t            var separator = cElement.attr(cAttrs.$attr.ncyBreadcrumbTextSeparator) || ' / ';\n\t\n\t            return {\n\t                post: function postLink(scope) {\n\t                    var labelWatchers = [];\n\t                    \n\t                    var registerWatchersText = function(labelWatcherArray, interpolationFunction, viewScope) {\n\t                        angular.forEach(getExpression(interpolationFunction), function(expression) {\n\t                            var watcher = viewScope.$watch(expression, function(newValue, oldValue) {\n\t                                if (newValue !== oldValue) {\n\t                                    renderLabel();\n\t                                }\n\t                            });\n\t                            labelWatcherArray.push(watcher);\n\t                        });\n\t                    };\n\t\n\t                    var renderLabel = function() {\n\t                        deregisterWatchers(labelWatchers);\n\t                        labelWatchers = [];\n\t                        \n\t                        var viewScope = $breadcrumb.$getLastViewScope();\n\t                        var steps = $breadcrumb.getStatesChain();\n\t                        var combinedLabels = [];\n\t                        angular.forEach(steps, function (step) {\n\t                            if (step.ncyBreadcrumb && step.ncyBreadcrumb.label) {\n\t                                var parseLabel = $interpolate(step.ncyBreadcrumb.label);\n\t                                combinedLabels.push(parseLabel(viewScope));\n\t                                // Watcher for further viewScope updates\n\t                                registerWatchersText(labelWatchers, parseLabel, viewScope);\n\t                            } else {\n\t                                combinedLabels.push(step.name);\n\t                            }\n\t                        });\n\t                        \n\t                        scope.ncyBreadcrumbChain = combinedLabels.join(separator);\n\t                    };\n\t\n\t                    $rootScope.$on('$viewContentLoaded', function (event) {\n\t                        if(!event.targetScope.ncyBreadcrumbIgnore) {\n\t                            renderLabel();\n\t                        }\n\t                    });\n\t\n\t                    // View(s) may be already loaded while the directive's linking\n\t                    renderLabel();\n\t                }\n\t            };\n\t\n\t        }\n\t    };\n\t}\n\tBreadcrumbTextDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\t\n\tangular.module('ncy-angular-breadcrumb', ['ui.router.state'])\n\t    .provider('$breadcrumb', $Breadcrumb)\n\t    .directive('ncyBreadcrumb', BreadcrumbDirective)\n\t    .directive('ncyBreadcrumbLast', BreadcrumbLastDirective)\n\t    .directive('ncyBreadcrumbText', BreadcrumbTextDirective);\n\t})(window, window.angular);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 4.app.js\n **/","/*! angular-breadcrumb - v0.4.1\n* http://ncuillery.github.io/angular-breadcrumb\n* Copyright (c) 2015 Nicolas Cuillery; Licensed MIT */\n\n(function (window, angular, undefined) {\n'use strict';\n\nfunction isAOlderThanB(scopeA, scopeB) {\n    if(angular.equals(scopeA.length, scopeB.length)) {\n        return scopeA > scopeB;\n    } else {\n        return scopeA.length > scopeB.length;\n    }\n}\n\nfunction parseStateRef(ref) {\n    var parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n    if (!parsed || parsed.length !== 4) { throw new Error(\"Invalid state ref '\" + ref + \"'\"); }\n    return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\nfunction $Breadcrumb() {\n\n    var $$options = {\n        prefixStateName: null,\n        template: 'bootstrap3',\n        templateUrl: null,\n        includeAbstract : false\n    };\n\n    this.setOptions = function(options) {\n        angular.extend($$options, options);\n    };\n\n    this.$get = ['$state', '$stateParams', '$rootScope', function($state, $stateParams, $rootScope) {\n\n        var $lastViewScope = $rootScope;\n\n        // Early catch of $viewContentLoaded event\n        $rootScope.$on('$viewContentLoaded', function (event) {\n            // With nested views, the event occur several times, in \"wrong\" order\n            if(!event.targetScope.ncyBreadcrumbIgnore &&\n                isAOlderThanB(event.targetScope.$id, $lastViewScope.$id)) {\n                $lastViewScope = event.targetScope;\n            }\n        });\n\n        // Get the parent state\n        var $$parentState = function(state) {\n            // Check if state has explicit parent OR we try guess parent from its name\n            var parent = state.parent || (/^(.+)\\.[^.]+$/.exec(state.name) || [])[1];\n            var isObjectParent = typeof parent === \"object\";\n            // if parent is a object reference, then extract the name\n            return isObjectParent ? parent.name : parent;\n        };\n\n        // Add the state in the chain if not already in and if not abstract\n        var $$addStateInChain = function(chain, stateRef) {\n            var conf,\n                parentParams,\n                ref = parseStateRef(stateRef),\n                force = false,\n                skip = false;\n\n            for(var i=0, l=chain.length; i<l; i+=1) {\n                if (chain[i].name === ref.state) {\n                    return;\n                }\n            }\n\n            conf = $state.get(ref.state);\n            // Get breadcrumb options\n            if(conf.ncyBreadcrumb) {\n                if(conf.ncyBreadcrumb.force){ force = true; }\n                if(conf.ncyBreadcrumb.skip){ skip = true; }\n            }\n            if((!conf.abstract || $$options.includeAbstract || force) && !skip) {\n                if(ref.paramExpr) {\n                    parentParams = $lastViewScope.$eval(ref.paramExpr);\n                }\n\n                conf.ncyBreadcrumbLink = $state.href(ref.state, parentParams || $stateParams || {});\n                chain.unshift(conf);\n            }\n        };\n\n        // Get the state for the parent step in the breadcrumb\n        var $$breadcrumbParentState = function(stateRef) {\n            var ref = parseStateRef(stateRef),\n                conf = $state.get(ref.state);\n\n            if(conf.ncyBreadcrumb && conf.ncyBreadcrumb.parent) {\n                // Handle the \"parent\" property of the breadcrumb, override the parent/child relation of the state\n                var isFunction = typeof conf.ncyBreadcrumb.parent === 'function';\n                var parentStateRef = isFunction ? conf.ncyBreadcrumb.parent($lastViewScope) : conf.ncyBreadcrumb.parent;\n                if(parentStateRef) {\n                    return parentStateRef;\n                }\n            }\n\n            return $$parentState(conf);\n        };\n\n        return {\n\n            getTemplate: function(templates) {\n                if($$options.templateUrl) {\n                    // templateUrl takes precedence over template\n                    return null;\n                } else if(templates[$$options.template]) {\n                    // Predefined templates (bootstrap, ...)\n                    return templates[$$options.template];\n                } else {\n                    return $$options.template;\n                }\n            },\n\n            getTemplateUrl: function() {\n                return $$options.templateUrl;\n            },\n\n            getStatesChain: function(exitOnFirst) { // Deliberately undocumented param, see getLastStep\n                var chain = [];\n\n                // From current state to the root\n                for(var stateRef = $state.$current.self.name; stateRef; stateRef=$$breadcrumbParentState(stateRef)) {\n                    $$addStateInChain(chain, stateRef);\n                    if(exitOnFirst && chain.length) {\n                        return chain;\n                    }\n                }\n\n                // Prefix state treatment\n                if($$options.prefixStateName) {\n                    $$addStateInChain(chain, $$options.prefixStateName);\n                }\n\n                return chain;\n            },\n\n            getLastStep: function() {\n                var chain = this.getStatesChain(true);\n                return chain.length ? chain[0] : undefined;\n            },\n\n            $getLastViewScope: function() {\n                return $lastViewScope;\n            }\n        };\n    }];\n}\n\nvar getExpression = function(interpolationFunction) {\n    if(interpolationFunction.expressions) {\n        return interpolationFunction.expressions;\n    } else {\n        var expressions = [];\n        angular.forEach(interpolationFunction.parts, function(part) {\n            if(angular.isFunction(part)) {\n                expressions.push(part.exp);\n            }\n        });\n        return expressions;\n    }\n};\n\nvar registerWatchers = function(labelWatcherArray, interpolationFunction, viewScope, step) {\n    angular.forEach(getExpression(interpolationFunction), function(expression) {\n        var watcher = viewScope.$watch(expression, function() {\n            step.ncyBreadcrumbLabel = interpolationFunction(viewScope);\n        });\n        labelWatcherArray.push(watcher);\n    });\n\n};\n\nvar deregisterWatchers = function(labelWatcherArray) {\n    angular.forEach(labelWatcherArray, function(deregisterWatch) {\n        deregisterWatch();\n    });\n};\n\nfunction BreadcrumbDirective($interpolate, $breadcrumb, $rootScope) {\n    var $$templates = {\n        bootstrap2: '<ul class=\"breadcrumb\">' +\n            '<li ng-repeat=\"step in steps\" ng-switch=\"$last || !!step.abstract\" ng-class=\"{active: $last}\">' +\n            '<a ng-switch-when=\"false\" href=\"{{step.ncyBreadcrumbLink}}\">{{step.ncyBreadcrumbLabel}}</a>' +\n            '<span ng-switch-when=\"true\">{{step.ncyBreadcrumbLabel}}</span>' +\n            '<span class=\"divider\" ng-hide=\"$last\">/</span>' +\n            '</li>' +\n            '</ul>',\n        bootstrap3: '<ol class=\"breadcrumb\">' +\n            '<li ng-repeat=\"step in steps\" ng-class=\"{active: $last}\" ng-switch=\"$last || !!step.abstract\">' +\n            '<a ng-switch-when=\"false\" href=\"{{step.ncyBreadcrumbLink}}\">{{step.ncyBreadcrumbLabel}}</a>' +\n            '<span ng-switch-when=\"true\">{{step.ncyBreadcrumbLabel}}</span>' +\n            '</li>' +\n            '</ol>'\n    };\n\n    return {\n        restrict: 'AE',\n        replace: true,\n        scope: {},\n        template: $breadcrumb.getTemplate($$templates),\n        templateUrl: $breadcrumb.getTemplateUrl(),\n        link: {\n            post: function postLink(scope) {\n                var labelWatchers = [];\n\n                var renderBreadcrumb = function() {\n                    deregisterWatchers(labelWatchers);\n                    labelWatchers = [];\n                    \n                    var viewScope = $breadcrumb.$getLastViewScope();\n                    scope.steps = $breadcrumb.getStatesChain();\n                    angular.forEach(scope.steps, function (step) {\n                        if (step.ncyBreadcrumb && step.ncyBreadcrumb.label) {\n                            var parseLabel = $interpolate(step.ncyBreadcrumb.label);\n                            step.ncyBreadcrumbLabel = parseLabel(viewScope);\n                            // Watcher for further viewScope updates\n                            registerWatchers(labelWatchers, parseLabel, viewScope, step);\n                        } else {\n                            step.ncyBreadcrumbLabel = step.name;\n                        }\n                    });\n                };\n\n                $rootScope.$on('$viewContentLoaded', function (event) {\n                    if(!event.targetScope.ncyBreadcrumbIgnore) {\n                        renderBreadcrumb();\n                    }\n                });\n\n                // View(s) may be already loaded while the directive's linking\n                renderBreadcrumb();\n            }\n        }\n    };\n}\nBreadcrumbDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\nfunction BreadcrumbLastDirective($interpolate, $breadcrumb, $rootScope) {\n\n    return {\n        restrict: 'A',\n        scope: {},\n        template: '{{ncyBreadcrumbLabel}}',\n        compile: function(cElement, cAttrs) {\n\n            // Override the default template if ncyBreadcrumbLast has a value\n            var template = cElement.attr(cAttrs.$attr.ncyBreadcrumbLast);\n            if(template) {\n                cElement.html(template);\n            }\n\n            return {\n                post: function postLink(scope) {\n                    var labelWatchers = [];\n\n                    var renderLabel = function() {\n                        deregisterWatchers(labelWatchers);\n                        labelWatchers = [];\n                        \n                        var viewScope = $breadcrumb.$getLastViewScope();\n                        var lastStep = $breadcrumb.getLastStep();\n                        if(lastStep) {\n                            scope.ncyBreadcrumbLink = lastStep.ncyBreadcrumbLink;\n                            if (lastStep.ncyBreadcrumb && lastStep.ncyBreadcrumb.label) {\n                                var parseLabel = $interpolate(lastStep.ncyBreadcrumb.label);\n                                scope.ncyBreadcrumbLabel = parseLabel(viewScope);\n                                // Watcher for further viewScope updates\n                                // Tricky last arg: the last step is the entire scope of the directive !\n                                registerWatchers(labelWatchers, parseLabel, viewScope, scope);\n                            } else {\n                                scope.ncyBreadcrumbLabel = lastStep.name;\n                            }\n                        }\n                    };\n\n                    $rootScope.$on('$viewContentLoaded', function (event) {\n                        if(!event.targetScope.ncyBreadcrumbIgnore) {\n                            renderLabel();\n                        }\n                    });\n\n                    // View(s) may be already loaded while the directive's linking\n                    renderLabel();\n                }\n            };\n\n        }\n    };\n}\nBreadcrumbLastDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\nfunction BreadcrumbTextDirective($interpolate, $breadcrumb, $rootScope) {\n\n    return {\n        restrict: 'A',\n        scope: {},\n        template: '{{ncyBreadcrumbChain}}',\n\n        compile: function(cElement, cAttrs) {\n            // Override the default template if ncyBreadcrumbText has a value\n            var template = cElement.attr(cAttrs.$attr.ncyBreadcrumbText);\n            if(template) {\n                cElement.html(template);\n            }\n            \n            var separator = cElement.attr(cAttrs.$attr.ncyBreadcrumbTextSeparator) || ' / ';\n\n            return {\n                post: function postLink(scope) {\n                    var labelWatchers = [];\n                    \n                    var registerWatchersText = function(labelWatcherArray, interpolationFunction, viewScope) {\n                        angular.forEach(getExpression(interpolationFunction), function(expression) {\n                            var watcher = viewScope.$watch(expression, function(newValue, oldValue) {\n                                if (newValue !== oldValue) {\n                                    renderLabel();\n                                }\n                            });\n                            labelWatcherArray.push(watcher);\n                        });\n                    };\n\n                    var renderLabel = function() {\n                        deregisterWatchers(labelWatchers);\n                        labelWatchers = [];\n                        \n                        var viewScope = $breadcrumb.$getLastViewScope();\n                        var steps = $breadcrumb.getStatesChain();\n                        var combinedLabels = [];\n                        angular.forEach(steps, function (step) {\n                            if (step.ncyBreadcrumb && step.ncyBreadcrumb.label) {\n                                var parseLabel = $interpolate(step.ncyBreadcrumb.label);\n                                combinedLabels.push(parseLabel(viewScope));\n                                // Watcher for further viewScope updates\n                                registerWatchersText(labelWatchers, parseLabel, viewScope);\n                            } else {\n                                combinedLabels.push(step.name);\n                            }\n                        });\n                        \n                        scope.ncyBreadcrumbChain = combinedLabels.join(separator);\n                    };\n\n                    $rootScope.$on('$viewContentLoaded', function (event) {\n                        if(!event.targetScope.ncyBreadcrumbIgnore) {\n                            renderLabel();\n                        }\n                    });\n\n                    // View(s) may be already loaded while the directive's linking\n                    renderLabel();\n                }\n            };\n\n        }\n    };\n}\nBreadcrumbTextDirective.$inject = ['$interpolate', '$breadcrumb', '$rootScope'];\n\nangular.module('ncy-angular-breadcrumb', ['ui.router.state'])\n    .provider('$breadcrumb', $Breadcrumb)\n    .directive('ncyBreadcrumb', BreadcrumbDirective)\n    .directive('ncyBreadcrumbLast', BreadcrumbLastDirective)\n    .directive('ncyBreadcrumbText', BreadcrumbTextDirective);\n})(window, window.angular);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/angular-breadcrumb/release/angular-breadcrumb.js\n ** module id = 30\n ** module chunks = 4\n **/"],"sourceRoot":""}