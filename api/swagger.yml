swagger: '2.0'
info:
  title: WBT-API
  description: |
    Verarbeitet AJAX-Requests vom Frontend, liefert Inhalte aus, regelt Benutzeranmeldung, überwacht Benutzeraktivitäten
  version: '1.0'
  contact:
    name: Tamara Cook
    email: tamara.cook@psychol.uni-giessen.de
basePath: /api
consumes:
  - application/json
produces:
  - application/json
  - text/html
  - text/plain
paths:
  /meta:
    get:
      summary: Get list of meta items
      parameters:
        - $ref: '#/parameters/conditions'
        - $ref: '#/parameters/projections'
        - $ref: '#/parameters/options'
      responses:
        200:
          description: A list of meta items
          schema:
            type: array
            items: {$ref: '#/definitions/Meta'}
    post:
      parameters:
        - name: meta
          in: body
          required: true
          schema: {$ref: '#/definitions/Meta'}
          description: A meta item to create
      responses:
        200: {$ref: '#/responses/ok'}
        400: {$ref: '#/responses/illegalInput'}
        401: {$ref: '#/responses/unauthenticated'}
        403: {$ref: '#/responses/forbidden'}
        500: {$ref: '#/responses/generalError'}
  /meta/{_id}:
    parameters:
      - name: _id
        type: string
        in: path
        required: true
        description: A meta item _id, which is a string
    get:
      summary: Get a meta item based on its _id
      responses:
        200:
          description: A complete meta item
          schema: {$ref: '#/definitions/Meta'}
        404: {$ref: '#/responses/notFound'}
    patch:
      summary: Update a meta item based on its _id
      parameters:
        - {$ref: '#/parameters/patches'}
      responses:
        200: {$ref: '#/responses/ok'}
        400: {$ref: '#/responses/illegalInput'}
        401: {$ref: '#/responses/unauthenticated'}
        403: {$ref: '#/responses/forbidden'}
        404: {$ref: '#/responses/notFound'}
        500: {$ref: '#/responses/generalError'}
    delete:
      summary: Remove a meta item based on its _id
      responses:
        200: {$ref: '#/responses/ok'}
        400: {$ref: '#/responses/illegalInput'}
        401: {$ref: '#/responses/unauthenticated'}
        403: {$ref: '#/responses/forbidden'}
        404: {$ref: '#/responses/notFound'}
        500: {$ref: '#/responses/generalError'}
  /units:
    get:
      summary: Get list of units
      parameters:
        - {$ref: '#/parameters/conditions'}
        - {$ref: '#/parameters/projections'}
        - {$ref: '#/parameters/options'}
      responses:
        200:
          description: A list of unit documents
          schema:
            type: array
            items: {$ref: '#/definitions/Unit'}
    post:
      description: Create a new unit
      parameters:
        - name: unit
          in: body
          required: true
          description: A new unit document to store
          schema: {$ref: '#/definitions/Unit'}
      responses:
        200:
          description: The newly created unit document
          schema: {$ref: '#/definitions/Unit'}
  /units/{_id}:
    parameters:
      - {$ref: '#/parameters/_id'}
    get:
      summary: Get a unit based on its _id
      responses:
        200:
          description: A unit document
          schema: {$ref: '#/definitions/Unit'}
    patch:
      summary: Update a unit based on its _id
      parameters:
        - {$ref: '#/parameters/patches'}
      responses:
        200: {$ref: '#/responses/ok'}
    delete:
      summary: Remove a unit based on its _id
      responses:
        200: {$ref: '#/responses/ok'}
definitions:
  ObjectId:
    type: string
    pattern: /^[0-9a-fA-F]{24}$/
  Meta:
    type: object
    required:
      - _id
      - title
      - position
      - menu
      - active
    properties:
      _id: {type: string}
      title: {type: string}
      position: {type: integer}
      menu: {type: string}
      active: {type: boolean}
      body: {type: string}
  PatchDocuments:
    type: array
    items: {$ref: '#/definitions/PatchDocument'}
  PatchDocument:
    type: object
    description: A JSONPatch document as defined by RFC 6902
    required:
      - op
      - path
    properties:
      op:
        type: string
        description: The operation to be performed
        enum:
          - add
          - remove
          - replace
          - move
          - copy
          - test
      path:
        type: string
        description: A JSON-Pointer
      value:
        type: object
        description: The value to be used within the operations.
      from:
        type: string
        description: A string containing a JSON Pointer value.
  Unit:
    type: object
    description: A unit document
    required:
      - _id
      - title
      - description
    properties:
      _id: {$ref: '#/definitions/ObjectId'}
      title: {type: string}
      subtitle: {type: string}
      description: {type: string}
      position: {type: integer}
parameters:
  _id:
    name: _id
    type: string
    in: path
    required: true
    description: Mongodb _id
  conditions:
    name: conditions
    in: query
    type: string
    required: false
    description: Item filtering for mongoose
  projections:
    name: projections
    in: query
    type: string
    required: false
    description: Field filtering for mongoose
  options:
    name: options
    in: query
    type: string
    required: false
    default: sort=position
    description: Options for mongoose
  patches:
    name: patches
    in: body
    required: true
    description: An array of JSON patch documents
    schema: {$ref: '#/definitions/PatchDocuments'}
responses:
  ok:
    description: Success
  illegalInput:
    description: Some parameter was incorrect
  unauthenticated:
    description: Action only allowed for authenticated users
  forbidden:
    description: Action not allowed for this user
  notFound:
    description: Requested item(s) not found
  generalError:
    description: Any internal server error
securityDefinitions:
  basic:
    type: basic
    description: Login with email and password, fetch a JWT token
  jwt:
    type: apiKey
    description: JWT Authentication
    in: header
    name: Authorization
security:
  - jwt: []
  - basic: []
